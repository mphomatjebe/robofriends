{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const reuestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCES,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["C:/Users/samue/Documents/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","reuestRobots","dispatch","fetch","then","response","json","data","REQUEST_ROBOTS_SUCCES","catch","error"],"mappings":"AAAA,SAAQA,mBAAR,EACEC,sBADF,EAEEC,sBAFF,EAGEC,qBAHF,QAG8B,gBAH9B;AAKA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAU;AACvCC,EAAAA,IAAI,EAAEN,mBADiC;AAEvCO,EAAAA,OAAO,EAAEF;AAF8B,CAAV,CAAvB;AAMP,OAAO,MAAMG,YAAY,GAAIC,QAAD,IAAc;AACzCA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAES,qBAAP;AAA8BR,IAAAA,OAAO,EAAEO;AAAvC,GAAD,CAFtB,EAGCE,KAHD,CAGOC,KAAK,IAAIR,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,OAAO,EAAEU;AAAvC,GAAD,CAHxB;AAIA,CANM","sourcesContent":["import {CHANGE_SEARCH_FIELD, \r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField = (text) =>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text \r\n\r\n})\r\n\r\nexport const reuestRobots = (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCES, payload: data}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}"]},"metadata":{},"sourceType":"module"}